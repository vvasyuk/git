###########
#Primitive types:
###########
 Integers:
  byte    (8 bits)  127
  char    (16 bits) char c = 'A'; char c = 65;
  short   (16 bits) 32,767
  int     (32 bits) 2,147,483,647
  long    (64 bits) long l = 65L
 Floating 
  float   (32 bits) float f = 65f
  double  (64 bits) double d = 65.55;
 Other
  boolean (1 bits)

###########
#Bit operations:
###########
 A   B   A|B A&B A^B ~A
 0   0   0   0   0   1
 1   0   1   0   1   0
 0   1   1   0   1   1
 1   1   1   1   0   0
 64<<1=128
 32>>1=16

###########
#Passing arguments:
###########
 pass by value - value is copied to formal parameter not affecting argument
 pass by refference - parameter gets a ref to argument, changes to the ref object will affect argument

 java uses pass by value (result depends if we pass primitive or ref)
 void modify(int i){i++}
 a=10; modify(a);        // initial a will not be affected, cause argument was copied by value
 void modify(Test o){o.i++}
 modify(test);           // ref to test is copied and passeed as perameter

###########
#Exceptions
###########
 Throwable:
  Error(stackOverfllow)
  Exception
   RuntimeExceptiom
    NullPointerException
    ArrayIndexOutofBound
    IllegalArgumentException
    ArithmeticException(/0)
   Other exceptions
 
 Checked exception - compile-time (SQLException, IOException, ClassNotFoundException)
 Unchecked exception - occur during the execution (RuntimeExceptiom)

###########
#Functions
###########
 public interface MyIF {
     int getNumЬer();
     default String getString () {
         return "bla";
     }
 }

###########
#Multithreading
###########
#states
 blocked         not running waits to get the lock (runnable<->blocked)
 new             not picked up by cpu yet (new->runnable)
 runnable        running by cpu
 terminated      ended (runnable->terminated)
 timed_waiting   sleep, wait, join (runnable<->timed_waiting)
 waiting         wait, join without time specified (runnable<->waiting)
#create
 class NewThread extends Thread {
     NewThread() {
         suреr("Демонстрационный поток");
         start(); 11 запустить поток на исполнение
     }
     puЬlic void run() {
         try {
             for(int i = 5; i > О; i--) {
             Thread.sleep(500);
         catch (InterruptedException е) {...}
             }
         }
     }
 }
#join()
 NewThread оbj1 = new NewThread ( "One" );
#wait till thread is over
 obj1.join();

#consumer producer
 public class Q {
     int n;
     boolean valueSet = false;
     synchronized int get(){
         while (!valueSet){                     // wait if value is not set
             try {wait();}
             catch(InterruptedException е) {System.out.println("interrupted");}
         }
         System.out.println("Received: " + n); //get message if value is set
         valueSet = false;
         notify ();
         return n;
     }
     synchronized void put(int n){
         while(valueSet){                    // if value is set - wait
             try {wait();}
             catch(InterruptedException е){ System.out.println("interrupted");}
             this.n = n;
         }
         valueSet = true;
         System.out.println("Sent: " + n);   // set value and send a message
         notify ();
     }
     static class Producer implements Runnable {
         Q q;
         Producer(Q q){
             this.q = q;
             new Thread(this, "Поставщик").start();
         }
         public void run(){
             int i = 0;
             while(true){
                 q.put (i++); }}}
     static class Consumer implements Runnable {
         Q q;
         Consumer (Q q) {
             this.q = q;
             new Thread(this, "Потребитель").start(); }
         public void run(){
             while(true)
                 q.get (); }}
     static class QTester {
         public static void main(String[] args) {
             Q q = new Q();
             new Producer(q);
             new Consumer(q); }}}

###########
#Enum
###########
enum Apple {
    Jonathan(10), GoldenDel(9), RedDel, Winesap(15), Cortland(8);
    private int price;
    Apple ( int р) { price = р; }
    Apple() { price = -1;}
    int getPrice () { return price;}
}
Apple ар = Apple.GoldenDel;
Arrays.stream(Apple.values()).forEach(x-> System.out.println(x + ":" + x.getPrice()));
System.out.println(Apple.valueOf("Winesap"));


###########
#Generics
###########
class Gen<T> {
    Т оЬ;
    Gen (Т о) {оЬ = о;}
    Т getob() {return оЬ;}
    void showТype (){System.out.println(ob.getClass().getName());}}
class GenDemo {
    puЬlic static void main(String args[])
    Gen<Integer> iOb = new Gen<Integer>(88);
    iOb.showТype();
    int v = iOb.getob();}
class NonGen {
    NonGen(Object о) {оЬ = о;}
    Obj ect getob () {return оЬ;}}
class NonGenDemo {
    puЬlic static void main(String args[])
    NonGen iOb = new NonGen(88);
    int v =(Integer) iOb.getob(); // can be issues
}
#unknown type
class Stats<T extends NumЬer> {
    Т[] nums; // array of Number subclasses
    Stats(T[] о){nums = о;}
    double average() {
        double sum = 0.0;
        for(int i=0; i < nums.length; i++){sum += nums[i].douЬleValue();}
        return sum / nums.length;}
    boolean sameAvg(Stats<?> оb){   // ?(unknown type) can accept Stats<Integer>, Stats<Double>
        if(average() == ob.average()) return true;
        return false;}}
#bounded unknown type        
class TwoD {
    int х, у;
    TwoD(int а, int b) {х = а;у = b;}}
class ThreeD extends TwoD {
    int z;
    ThreeD(int а, int b, int c) {super(a,b);z = c;}}
class Coords<T extends TwoD> {  //array of coordinates
    Т[] coords;
    Coords (Т[] o) {coords = о;}}
class BoundedWildcard {
    static void showXY(Coords<?> с) {   //TwoD and ThreeD have x and y
        for(int i=0; i < c.coords.length; i++){
            System.out.println(c.coords[i].х + " " + c.coords[i].у);
        }}
    static void showXYZ(Coords<? extends ThreeD> с) { //only ThreeD has z
        for(int i=O; i < c.coords.length; i++){
            Systern.out.println(c.coords[i].х + c.coords[i].у + с.coords[i].z) ;
        }}}
#generic method
class GenMethDemo {
    static <Т extends ComparaЬle<T>, V extends Т> boolean isIn(T х, V[] у) {
        for(int i=O; i < y.length; i++){
            if(x.equals(y[i] )) return true;}
        return false;}}
usage:
    isIn(2,nums)
   
#type erasure
type constraints enforced during compile time
this one is replace after compilation
public class Stack<E> {         --> Stack
    private E[] stackContent;   --> Object[] stackContent;
    public void push(E data){}  --> push(Object data)
    public E pop(){}            --> Object pop()
}
#cannot create instance from generic type
T ob = new T(); // not working

###########
#Lambda
###########
 