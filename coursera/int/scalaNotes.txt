###########
#Scala class hierarchy
###########
  #########################################################################################################
  #+---+                                                                                                  #
  #|any|                                                                                                  #
  #+---+                                                                                                  #
  #|    +------+                                                                                  +------+#
  #+----+anyVal+-+--------+--------+--------+--------+--------+--------+--------+--------+<-------+Nothng|#
  #|    +------+ |        |        |        |        |        |        |        |        |        +------+#
  #|             +------+ +------+ +------+ +------+ +------+ +------+ +------+ +------+ +------+         #
  #|             |Double| |Float | |Long  | |Int   | |Short | |Byte  | |Char  | |Bolean| |Unit  |         #
  #|             +------+ +------+ +------+ +------+ +------+ +------+ +------+ +------+ +------+         #
  #|                                                                                                      #
  #|                                                                                                      #
  #|    +------+                                     +------+                                             #
  #+----+anyRef+-+--------+--------+--------+<-------+Null  |                                             #
  #     +------+ |        |        |        |        +------+                                             #
  #              +------+ +------+ +------+ +------+                                                      #
  #              |Itrble+<+Seq   +<+List  | |Option|                                                      #
  #              +------+ +------+ +------+ +------+                                                      #
  #########################################################################################################

###########
#Collections
###########
  +-------------------------------------------------------------+
  |                     Traversable (foreach)                   | // val s = Seq(1, 2, 3 -> delegate is a list(s: Seq[Int] = List(1, 2, 3));
  |                          |                                  | // Seq    - idxAccess O(n); prepend O(1); 
  |                          |                                  | // Vector - idxAccess O(1); update O(1)
  |                       Iterable (iterator)                   | // val x = IndexedSeq(1,2,3) // x: IndexedSeq[Int] = Vector(1, 2, 3)
  |                          |                                  |
  |       +------------------+--------------------+             | // val ar = Array(1,2,3)
  |      Map(HashMap)       Set(HashSet)         Seq(List)      | // can be generic Array[T] (in Java not)
  |       |  ListMap         |  ListSet           |             |
  |       |                  |             +------+-------+     |
  |   SortedMap(TreeMap) SortedSet      Buffer IndxSeq LinearSeq|
  |       |                  |            |       |        |    |
  |     BitSet               |          ArBuff Vector    List   |
  |                       BitSet      ListBuff String    Stack  |
  |                                            Range     Stream |
  |                                                      Queue  |
  +-------------------------------------------------------------+

###########
#Seq
###########
  val seq = Seq(1, 2, 3)
  assert(seq(0) == 1)
  assert(0 +: seq == Seq(0,1,2,3))  //seq.prependedAll(0)
  assert(seq :+ 0 == Seq(1,2,3,0))  //seq.appendedAll(0)
  assert(seq.updated(0, 11) == Seq(11,2,3))

###########
#List (effective head and tail)
###########
  +--------------------------------------------------------------------+
  | sealed trait ConsList[+A]                                          |  // 1 :: 2 :: 3 :: Nil
  | case class Cons[A](head: A, tail: ConsList[A]) extends ConsList[A] |  // same as 
  | case object Empty extends ConsList[Nothing]                        |  // Cons(1, Cons(2, Cons(3, Empty)))
  +--------------------------------------------------------------------+

  +------------------------------------------+
  | def sum(xs: List[Int]): Int = xs match { |
  |   case Nil => 0                          |
  |   case head :: tail => head + sum(tail)  |
  | }                                        |
  +------------------------------------------+
  - conact
  List(1, 2) ::: List(3, 4, 5)        // res0: List[Int] = List(1, 2, 3, 4, 5)

  -foldLeft                                                         - foldRight
  +--------------------------------------------------------------+  +------------------------------------------------------------+
  | def foldLeft[A, B](xs: Seq[A], z: B)(op: (B, A) => B): B = { |  |   def foldRight[B](z: B)(f: (A, B) => B): B = this match { |
  |   def f(xs: Seq[A], acc: B): B = xs match {                  |  |     case Nil => z                                          |
  |     case Seq()   => acc                                      |  |     case Cons(head, tail) => f(head, tail.foldRight(z)(f)) |
  |     case x +: xs => f(xs, op(acc, x))                        |  |   }                                                        |
  |   }                                                          |  +------------------------------------------------------------+
  |   f(xs, z)                                                   |
  | }                                                            |
  +--------------------------------------------------------------+
    assert(l1.foldLeft(new StringBuilder(""))((acc, e) =>acc.addAll("," + e)).toString() == ",1,2")     // as seen - orders will be different for foldLeft and foldRight
    assert(l1.foldRight(new StringBuilder(""))((e, acc) =>acc.addAll("," + e)).toString() == ",2,1")
  
  -zipped
  (List(10, 20), List(3, 4, 5)).zipped.map(_ * _)                 // res63: List[Int] = List(30, 80)

###########
#Vector (effective apply and length if mutable - update)
###########

###########
#ArrayBuffer
###########
    ArrayBuffer.fill[Int](in.length+1)(-1)
    val a = ArrayBuffer.fill(sz,sz)(false) // multidimensional

###########
#Map
###########
    val m = Map("a"->1,"b"->2)
    assert(m("a") == 1)
    val added = m + ("c" -> 3); assert(added("c") == 3); assert(added("a") == 1)
    val changed = m + ("a" -> 11); assert(changed("a") == 11); assert(changed("b") == 2)
    val increasedCnt = if (m.contains("a"))m + ("a" -> (m("a")+1)) else m + ("a" -> 1); assert(increasedCnt("a") == 2)
    val increasedCnt2 = if (m.contains("a"))m.updated("a",(m("a")+1)) else m.updated("a",1); assert(increasedCnt2("a") == 2)
      //iterate
      increasedCnt.foreach(e => e._1 + e._2)
      for ((k,v) <- increasedCnt) yield (k, v)

      //mutable
      val mutable = collection.mutable.Map[String, Int]()
      mutable.updateWith("a")({
        case Some(count) => Some(count + 1)
        case None => Some(1)
      })
      assert(mutable("a") == 1)

###########
#Set
###########
  Set(1, 2, 3, 4).head // 1
  Set(1, 2, 3, 4).tail // Set(2, 3, 4)
  Set(1, 2, 3, 4).isEmpty // false

###########
#Pattern matching
###########
    val in  = List(10, 15, 3, 7)
    in match {
        case e::rest if set.contains(k-e) => true
        case e::rest  => iter(in.tail, k, set+in.head)
        case Nil => false
      }
    iter(in, k, Set[Int]())

###########
#foldLeft
###########
    val in = List(1, 2, 3, 4, 5)
    val sum = in.foldLeft(1) { (e,acc) => acc*e }

###########
#zipWithIndex
###########    
    val res = ArrayBuffer.fill[Int](in.size)(0)
    //second is index
    in.zipWithIndex.foldLeft(res){ (acc, e) =>{
      val (el, indx) = e
      if(indx-2 >= 0){
        acc(indx) = acc(indx-2) + el
      } else {
        acc(indx) = el
      }
      acc
    }}

###########
#for comprehension
########### 
  for (x <- xs if x % 2 == 0)
    yield x * 10

###########
#Range
########### 
    for(n <- Range(0,100)){???}     // new Range(start: Int, end: Int, step: Int)

###########
#sortBy
########### 
    tuples: Array[(Int, Int)]
    val sortedArray = tuples.sortBy(_._2)

###########
#Partial function
###########
  val divide = (x: Int) => 42 / x   // blows up when the input parameter is zero:
  //divide function as a PartialFunction 
    +------------------------------------------------+
    |   val divide = new PartialFunction[Int, Int] { |
    |     def apply(x: Int) = 42 / x                 |
    |     def isDefinedAt(x: Int) = x != 0           |
    |   }                                            |
    +------------------------------------------------+
    if (divide.isDefinedAt(1)) divide(1)

  or
  Partial functions are expressions in which not all of the arguments defined in a function are supplied as parameters to the function
  +-------------------------------------------------------------------------------+
  | def concatUpper(s1: String, s2: String): String = (s1 + " " + s2).toUpperCase |
  | val c2 = concatUpper("short", _: String)                                      | // ( _ ) turns the method into a function value
  | println(c2("pants"))                                                          |
  +-------------------------------------------------------------------------------+

  or
  Another way of thinking of partial functions is as functions that will inform you when you supply them with parameters that are out of their domain.  
  Every partial function is, as you might guess, of the type PartialFunction. This trait defines a method orElse that takes another PartialFunction
  +------------------------------------------------------------------------------+
  | val truthier: PartialFunction[Boolean, String] = { case true => "truthful" } |  // case statements is expanded internally to partially applied functions
  | val fallback: PartialFunction[Boolean, String] = { case x => "sketchy" }     |  // functions provide the abstract method isDefinedAt, a feature of the PartialFunction trait used to specify the boundaries of a partial function’s domain
  | val tester = truthier orElse fallback                                        |
  |                                                                              |
  | println(tester(1 == 1))                                                      |
  | println(tester(2 + 2 == 5))                                                  |
  +------------------------------------------------------------------------------+

  +----------------------------------------------------+
  | val pantsTest: PartialFunction[String, String] = { |
  | case "pants" => "yes, we have pants!"              |
  | }                                                  |
  | println(pantsTest.isDefinedAt("pants"))            |
  | println(pantsTest.isDefinedAt("skort"))            |
  +----------------------------------------------------+

###########
#Value Classes
###########
  +--------------------------------------------------------------------+
  |   trait Distance extends Any                                       |
  |   case class Meter(val value: Double) extends AnyVal with Distance |
  |   def add(a: Distance, b: Distance): Distance = ...                |
  |   add(Meter(3.4), Meter(4.3))                                      |
  +--------------------------------------------------------------------+

###########
#Implicit classes
###########
  +-----------------------------------------+ +------------------------------+
  | object Helpers {                        | | import Helpers._             |
  |   implicit class IntWithTimes(x: Int) { | | scala> 5 times println("HI") |
  |     def times[A](f: => A): Unit = {     | | HI                           |
  |       def loop(current: Int): Unit =    | | HI                           |
  |         if(current > 0) {               | | HI                           |
  |           f                             | | HI                           |
  |           loop(current - 1)             | | HI                           |
  |         }                               | +------------------------------+
  |       loop(x)                           |
  |     }                                   |
  |   }                                     |
  | }                                       |
  +-----------------------------------------+

###########
#Type System  (Programming Scala - Scalability)
###########
  - variance under inheritence
    [+A] -> if List[String] is subtype of List[AnyRef]  - variance is covariant
    [-A] -> Function1(-C,+C) is contravariant in its first type parameter, and so Function1[Any, Any] is a subtype of Function1[String, Any].
