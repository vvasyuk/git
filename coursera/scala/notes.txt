###############
# week 1
###############

- call by value(default)
def callByValue(x: Int) = {}	# evaluated once when entering method
- call by name
def callByName(x: => Int) = {}	# evaluated each time when called

- conditionals
def and(x:Boolean, y:Boolean) = if (x) y else false

- square root
def sqrt(x:Int) = srtIter(1.0,x)
def srtIter(guess: Double, x:Double):Double = if (isGoodEnough(guess,x)) guess else sqrtIter(improve(guess,x)x)
def isGoodEnough(guess:Double, x:Double) = abs(guess*guess-x)/x < 0.001
def improve(guess:Double, x:Double) = abs(guess+x/guess)/2

- greatest common divisor
def gcd(a:Int, b:Int) = if (b==0) a else gcd(b, a%b)

- factorial
def factorial(n:Int) = if (n==0) 1 else n*factorial(n-1)
- factorial (tail)
def factorialTail(n:Int):Int = {
	def loop(acc:Int, n:Int) = if (n==0) acc else loop(acc*n, n-1)
	loop(1,n)
}

###############
# week 2
###############
- higher order function
def sum(f:Int=>Int, a:Int, b:Int) = if (a>b) 0 else f(a)+sum(f,a+1,b)
sum(cube,a,b)
def cube(x:Int):Int = x*x*x