####################
# Basic Scala
####################

    ### Values
    - tuples
        +---------------------------------------------------------------------------+
        | val t: (Int, Boolean, String) = (1, true, "hello")                        |
        | val (a, b, c) = t   // a: Int = 1; b: Boolean = true; c: String = "hello" |
        +---------------------------------------------------------------------------+
    - arrays (fixed length)
        +--------------------------------+
        | val a = Array[Int](1, 2, 3, 4) |
        | a(0) = 11 // (11, 2, 3, 4)     |
        +--------------------------------+
    - option
        +----------------------------------------------------------------+  +--------------------------------------------------+
        | lastNameOpt match {                                            |  | Some("Li").getOrElse("<unknown>")   // "Li"      |
        |     case Some(lastName) => println(s"Hello $title. $lastName") |  | None.getOrElse("<unknown>")         // "unknown" |
        |     case None => println(s"Hello $firstName")                  |  +--------------------------------------------------+
        | }                                                              |
        +----------------------------------------------------------------+

        +--------------------------------------------------+
        | val os1: Option[String] = Some("name")           |
        | val os2: Option[String] = None                   |
        | val o1 = os1.map(_.length).getOrElse(-1)    //4  |
        | val o2 = os2.map(_.length).getOrElse(-1)    //-1 |
        +--------------------------------------------------+
    
    ### Loops, Conditionals, Comprehensions
    - for                                                                                   - multi
        +--------------------------------------------+  +------------------------------+    +--------------------------------------------------------+
        | var total = 0                              |  | var total = 0                |    | val multi = Array(Array(1, 2, 3), Array(4, 5, 6))      |
        | val items = Array(1, 10, 100, 1000)        |  | for (i <- Range(0, 5)) {     |    | for (arr <- multi; i <- arr) println(i) // 1,2,3,4,5,6 |
        | for (item <- items) total += item   //1111 |  |     total = total + i   //10 |    +--------------------------------------------------------+
        +--------------------------------------------+  | }                            |
                                                        +------------------------------+
    - if
        +----------------------------------------------+
        | var total = 0                                |
        | for (i <- Range(0, 10)) {                    |
        |     total += (if (i % 2 == 0) i else 2) //30 |
        | }                                            |
        +----------------------------------------------+
    - Comprehensions
        +-----------------------------------------------------------+   +-----------------------------------------------------------------------------------------------------+
        | val a = Array(1, 2, 3, 4)                                 |   | val a = Array(1, 2); val b = Array("hello", "world")                                                |
        | val a2 = for (i <- a) yield i * i   //Array(1, 4, 9, 16)  |   | val flattened = for (i <- a; s <- b) yield s + i    //Array("hello1", "world1", "hello2", "world2") |
        +-----------------------------------------------------------+   +-----------------------------------------------------------------------------------------------------+
        +------------------------+
        | val flattened2 = for { |  // use {} for multiline
        |   i <- a1              |
        |   s <- a2              |
        | } yield s + i          |
        +------------------------+
    
    ### Methods and Functions
        +---------------------------+
        | def hello(i: Int = 0) = { |
        |     "hello " + i          |
        | }                         |
        +---------------------------+
        - functions
        +--------------------------------+
        | var g: Int => Int = i => i + 1 |  // cannot have optional arguments (i.e. with default values) 
        | g = i => i * 2                 |  // cannot take type parameters via the [T] syntax
        | g(10)   // 20                  |
        +--------------------------------+
        - methods taking Functions
        +------------------------------------------+    +-----------------------------------+               +-------------------------------+
        | class Box(var x: Int) {                  |    | val b = new Box(1)                |               | def increment(i: Int) = i + 1 |
        |     def update(f: Int => Int) = x = f(x) |    | b.printMsg("Hello")     //Hello1  |               | b.update(increment)           |
        |     def printMsg(msg: String) = {        |    | b.update(i => i + 5)              |   // _ + 5    | b.update(x => increment(x))   |
        |         println(msg + x)                 |    | b.printMsg("Hello")     // Hello6 |               | b.update(increment(_))        |
        |     }                                    |    |                                   |               +-------------------------------+
        | }                                        |    +-----------------------------------+
        +------------------------------------------+
        - multiple Parameter Lists
        +----------------------------------------+  +------------------------------------+
        | def myLoop(start: Int, end: Int)       |  | myLoop(start = 5, end = 10) { i => |
        |     (callback: Int => Unit) = {        |  |     println(s"i has value ")       |
        |         for (i <- Range(start, end)) { |  | }                                  |
        |             callback(i)                |  +------------------------------------+
        |         }                              |
        | }                                      |
        +----------------------------------------+

    ### Classes and Traits
        +-----------------------------------+
        | class Foo(x: Int) {               |   // x is private -> "val x: Int" - public - "f.x"
        |     val bar = "bar"               |   // added to constructor
        |     def printMsg(msg: String) = { |   
        |         println(msg + x)          |   // val f = new Foo(1)
        |     }                             |   // f.printMsg("hello")  // hello1
        | }                                 |
        +-----------------------------------+
        - Traits
        +---------------------------------------------------------------+
        | trait Point{ def hypotenuse: Double }                         |
        | class Point2D(x: Double, y: Double) extends Point{            |
        |     def hypotenuse = math.sqrt(x * x + y * y)                 |
        | }                                                             |
        | class Point3D(x: Double, y: Double, z: Double) extends Point{ |
        |     def hypotenuse = math.sqrt(x * x + y * y + z * z)         |
        | }                                                             |
        +---------------------------------------------------------------+

    - flexibleFizzBuzz
    // flexibleFizzBuzz(s => ())    
    +-------------------------------------------------+ +-------------------------------------+
    | def flexibleFizzBuzz(f: String => Unit) = {     | | var i = 0                           |
    |   for (i<-Range(0,100)){                        | | val output = new Array[String](100) |
    |     if (i % 3 == 0 && i % 5 == 0) f("FizzBuzz") | | flexibleFizzBuzz{s =>               |
    |     else if (i % 3 == 0) f("Fizz")              | |   output(i) = s                     |
    |     else if (i % 5 == 0) f("Buzz")              | |   i += 1                            |
    |     else f(i.toString)                          | | }                                   |
    |   }                                             | +-------------------------------------+
    | }                                               |
    +-------------------------------------------------+ 
    - printMessages
    +----------------------------------------------------------------+  +----------------------------------------------------------------+
    | def printMessages(messages: Array[Msg]): Unit = {              |  | def printMessages(messages: Array[Msg]): Unit = {              |
    |   def loop(par: Option[Int], spacesNumber: Int): Int = {       |  |   def printFrag(parent: Option[Int], indent: String): Unit = { |
    |     par match{                                                 |  |     for (msg <- messages if msg.parent == parent) {            |
    |       case Some(p) => loop(messages(p).parent, spacesNumber+1) |  |       println(s"#${msg.id} ${msg.txt}")                        |
    |       case None => spacesNumber                                |  |       printFrag(Some(msg.id), indent + "    ")                 |
    |     }                                                          |  |     }                                                          |
    |   }                                                            |  |   }                                                            |
    |   for (m<-messages){ println(" "*loop(m.parent, 0) + m.txt)}   |  |   printFrag(None, "")                                          |
    | }                                                              |  | }                                                              |
    +----------------------------------------------------------------+  +----------------------------------------------------------------+
    - contextManager
    +---------------------------------------------------------------------------+
    |   def withFileWriter(str: String)(f: BufferedWriter => Unit) = {          |   // withFileWriter("File.txt") { writer => writer.write("Hello\n"); writer.write("World!")}
    |     val bw = new BufferedWriter(new FileWriter(str))                      |
    |     f(bw)                                                                 |
    |     bw.close()}                                                           |
    |                                                                           |
    |   def withFileReader(str: String)(f: BufferedReader => String):String = { |   // val result = withFileReader("File.txt") { reader =>reader.readLine() + "\n" + reader.readLine()}
    |     val fr = new BufferedReader(new FileReader(str))                      |   // assert(result == "Hello\nWorld!")
    |     val res =f(fr)                                                        |
    |     fr.close()                                                            |
    |     res}                                                                  |
    +---------------------------------------------------------------------------+